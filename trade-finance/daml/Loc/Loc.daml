module Loc.Loc where

import Loc.Applicant as A

type Level1ApprovedId = ContractId Level1Approved
type Level2ApprovedId = ContractId Level2Approved
type Level3ApprovedId = ContractId Level3Approved
type Level4ApprovedId = ContractId Level4Approved
type Level5ApprovedId = ContractId Level5Approved
type Level6ApprovedId = ContractId Level6Approved
type FullyApprovedId  = ContractId FullyApproved
type RevokeId         = ContractId Revoke
-- rule
data Rule = Rule
  with
    condition: Text
    description: Text
  deriving (Eq, Show)
-- Revoke
template Revoke
  with
    owner: Party
    reason: Text
    observers : [Party]
  where
    signatory owner
    observer observers
    ensure reason /= ""
    --
    choice Disclose : RevokeId
        with users : [Party]
      controller owner
        do create this with observers = users
-- loc
data Loc = Loc
    with 
        sale                     : SaleId
        rules                    : [Rule]
        issuerLevel1Approver     : Party
        bankIssuerLevel2Approver : Party
        bankOwnerLevel3Approver  : Party
        ownerLevel4Approver      : Party
        shipLevel5Approver       : Party
        bankIssuerLevel6Approver : Party
        bankOwnerLevel7Approver  : Party
    deriving (Eq, Show)
-- Proposed created by issuer
template Proposed
  with
    content : Loc
  where
    signatory content.issuerLevel1Approver 

    ensure content.bankIssuerLevel6Approver == content.bankIssuerLevel2Approver
        && content.bankOwnerLevel3Approver == content.bankOwnerLevel7Approver

    choice Level1Approve : Level1ApprovedId
        controller content.issuerLevel1Approver
        do  
            -- confirm if all levels belong to approved entities
            sale <- fetch content.sale
            assertMsg "Issuer constraint" (sale.issuer.owner == content.issuerLevel1Approver)
            assertMsg "Owner constraint" (sale.owner.owner == content.ownerLevel4Approver)
            -- Bank constraint
            assertMsg "Bank Owner constraint" (sale.owner.bank.party == content.bankOwnerLevel3Approver)
            assertMsg "Bank Issuer constraint" (sale.issuer.bank.party == content.bankIssuerLevel2Approver)
            -- Product constraint
            product <- fetch sale.product
            assertMsg "Product Owner constraint" (product.owner == content.ownerLevel4Approver)
            assertMsg "Product Issuer constraint" (product.issuer == content.issuerLevel1Approver)
            -- contract constraint
            assertMsg "Contract Owner constraint" (sale.contract.owner == content.ownerLevel4Approver)
            assertMsg "Contract Issuer constraint" (sale.contract.issuer == content.issuerLevel1Approver)
            -- Shipper constraint
            assertMsg "Shipper constraint" (sale.shipper == content.shipLevel5Approver)

            create Level1Approved 
                with content
    choice Declined : RevokeId
      with reason: Text
      controller content.issuerLevel1Approver
      do 
        sale <- fetch content.sale
        create Revoke 
          with
            reason
            owner = content.issuerLevel1Approver
            observers = [sale.owner.bank.party, sale.issuer.bank.party, sale.owner.owner, sale.issuer.owner]
            
-- issuer Aprove content on Loc -> Emits Loc for own bank
-- Issuer aprove
template Level1Approved
  with
    content : Loc
  where
    signatory content.issuerLevel1Approver
    observer content.bankIssuerLevel2Approver
    choice Level2Approve : Level2ApprovedId
        with loc: Loc
        controller content.bankIssuerLevel2Approver
        do  
            assertMsg "LOC is the same as you approve" (loc == content)
            create Level2Approved 
                with content = loc
    choice DeclinedLevel1 : RevokeId
      with reason: Text
      controller content.bankIssuerLevel2Approver
      do 
        sale <- fetch content.sale
        create Revoke 
          with
            reason
            owner = content.bankIssuerLevel2Approver
            observers = [sale.owner.bank.party, sale.issuer.bank.party, sale.owner.owner, sale.issuer.owner]
-- Bank Issuer approve
template Level2Approved
  with
    content : Loc
  where
    signatory content.issuerLevel1Approver, content.bankIssuerLevel2Approver
    observer content.bankOwnerLevel3Approver
    choice Level3Approve : Level3ApprovedId
        with loc: Loc
        controller content.bankOwnerLevel3Approver
        do  
            assertMsg "LOC is the same as you approve" (loc == content)
            create Level3Approved 
                with content = loc
    choice DeclinedLevel2 : RevokeId
      with reason: Text
      controller content.bankOwnerLevel3Approver
      do 
        sale <- fetch content.sale
        create Revoke 
          with
            reason
            owner = content.bankOwnerLevel3Approver
            observers = [sale.owner.bank.party, sale.issuer.bank.party, sale.owner.owner, sale.issuer.owner]
-- Bank Owner approve
template Level3Approved
  with
    content : Loc
  where
    signatory content.issuerLevel1Approver, content.bankIssuerLevel2Approver, content.bankOwnerLevel3Approver
    observer content.ownerLevel4Approver
    choice Level4Approve : Level4ApprovedId
        with loc: Loc
        controller content.ownerLevel4Approver
        do  
            assertMsg "LOC is the same as you approve" (loc == content)
            create Level4Approved 
                with content = loc
    choice DeclinedLevel3 : RevokeId
      with reason: Text
      controller content.ownerLevel4Approver
      do 
        sale <- fetch content.sale
        create Revoke 
          with
            reason
            owner = content.ownerLevel4Approver
            observers = [sale.owner.bank.party, sale.issuer.bank.party, sale.owner.owner, sale.issuer.owner]
-- Owner approve
template Level4Approved
  with
    content : Loc
  where
    signatory content.issuerLevel1Approver, content.bankIssuerLevel2Approver, content.bankOwnerLevel3Approver, content.ownerLevel4Approver
    observer content.shipLevel5Approver
    choice Level5Approve : Level5ApprovedId
        with loc: Loc
        controller content.shipLevel5Approver
        do  
            assertMsg "LOC is the same as you approve" (loc == content)
            create Level5Approved 
                with content = loc
    choice DeclinedLevel4 : RevokeId
      with reason: Text
      controller content.shipLevel5Approver
      do 
        sale <- fetch content.sale
        create Revoke 
          with
            reason
            owner = content.shipLevel5Approver
            observers = [sale.owner.bank.party, sale.issuer.bank.party, sale.owner.owner, sale.issuer.owner, content.shipLevel5Approver]
-- Ship approve
template Level5Approved
  with
    content : Loc
  where
    signatory content.issuerLevel1Approver, content.bankIssuerLevel2Approver, content.bankOwnerLevel3Approver, content.ownerLevel4Approver, content.shipLevel5Approver
    observer content.bankIssuerLevel6Approver
    choice Level6Approve : Level6ApprovedId
        with loc: Loc
        controller content.bankIssuerLevel6Approver
        do  
            assertMsg "LOC is the same as you approve" (loc == content)
            create Level6Approved 
                with content = loc
    choice DeclinedLevel5 : RevokeId
      with reason: Text
      controller content.bankIssuerLevel6Approver
      do 
        sale <- fetch content.sale
        create Revoke 
          with
            reason
            owner = content.bankIssuerLevel6Approver
            observers = [sale.owner.bank.party, sale.issuer.bank.party, sale.owner.owner, sale.issuer.owner]
-- Bank Owner approve 2nd
template Level6Approved
  with
    content : Loc
  where
    signatory content.issuerLevel1Approver, content.bankIssuerLevel2Approver, content.bankOwnerLevel3Approver, content.ownerLevel4Approver, content.shipLevel5Approver, content.bankIssuerLevel6Approver
    observer content.bankOwnerLevel7Approver
    choice FullyApprove : FullyApprovedId
        with loc: Loc
        controller content.bankOwnerLevel7Approver
        do  
            assertMsg "LOC is the same as you approve" (loc == content)
            archive loc.sale
            create FullyApproved 
                with content = loc
    choice DeclinedLevel6 : RevokeId
      with reason: Text
      controller content.bankOwnerLevel7Approver
      do 
        sale <- fetch content.sale
        create Revoke 
          with
            reason
            owner = content.bankOwnerLevel7Approver
            observers = [sale.owner.bank.party, sale.issuer.bank.party, sale.owner.owner, sale.issuer.owner]
-- Bank Issuer approve 2nd -> Consensus for each level
template FullyApproved
  with
    content : Loc
  where
    signatory content.issuerLevel1Approver, content.bankIssuerLevel2Approver, content.bankOwnerLevel3Approver, content.ownerLevel4Approver, content.shipLevel5Approver, content.bankIssuerLevel6Approver, content.bankOwnerLevel7Approver
    choice EndLoc : ()
      controller content.issuerLevel1Approver
      do
        return ()
