module Loc.Loc where

import Loc.Applicant as A

type BuyerApprovedId = ContractId BuyerApproved
type BankBuyerApprovedId = ContractId BankBuyerApproved
type BankSellerApprovedId = ContractId BankSellerApproved
type SellerApprovedId = ContractId SellerApproved
type ShipApprovedId = ContractId ShipApproved
type DocumentationApprovedId = ContractId DocumentationApproved
type FullyApprovedId  = ContractId FullyApproved
type RevokeId         = ContractId Revoke
-- rule
data Rule = Rule
  with
    condition: Text
    description: Text
  deriving (Eq, Show)
-- Revoke
template Revoke
  with
    owner: Party
    reason: Text
    observers : [Party]
  where
    signatory owner
    observer observers
    ensure reason /= ""
    --
    choice Disclose : RevokeId
        with users : [Party]
      controller owner
        do create this with observers = users
-- loc
data Loc = Loc
    with 
        sale                     : SaleId
        -- Aonde colocar as rules? nivel do loc ou a nivel do agreement entre comprador e vendedor?
        rules                    : [Rule]
        issuerBuyer     : Party
        bankBuyer       : Party
        bankSeller      : Party
        ownerSeller     : Party
        shipSeller      : Party
        bankFinalSeller : Party
        bankFinalBuyer  : Party
    deriving (Eq, Show)
-- Proposed created by issuer
template Proposed
  with
    content : Loc
  where
    signatory content.issuerBuyer 

    ensure content.bankFinalSeller == content.bankSeller
        && content.bankFinalBuyer == content.bankBuyer

    choice BuyerApprove : BuyerApprovedId
        controller content.issuerBuyer
        do  
            -- confirm if all levels belong to approved entities
            sale <- fetch content.sale
            assertMsg "Issuer constraint" (sale.issuer.owner == content.issuerBuyer)
            assertMsg "Owner constraint" (sale.owner.owner == content.ownerSeller)
            -- Bank constraint
            assertMsg "Bank Owner constraint" (sale.owner.bank.party == content.bankSeller)
            assertMsg "Bank Issuer constraint" (sale.issuer.bank.party == content.bankBuyer)
            -- Product constraint
            product <- fetch sale.product
            assertMsg "Product Owner constraint" (product.owner == content.ownerSeller)
            assertMsg "Product Issuer constraint" (product.issuer == content.issuerBuyer)
            -- contract constraint
            assertMsg "Contract Owner constraint" (sale.contract.owner == content.ownerSeller)
            assertMsg "Contract Issuer constraint" (sale.contract.issuer == content.issuerBuyer)
            -- Shipper constraint
            assertMsg "Shipper constraint" (sale.shipper == content.shipSeller)

            create BuyerApproved 
                with content
    choice Declined : RevokeId
      with reason: Text
      controller content.issuerBuyer
      do 
        sale <- fetch content.sale
        create Revoke 
          with
            reason
            owner = content.issuerBuyer
            observers = [sale.owner.bank.party, sale.issuer.bank.party, sale.owner.owner, sale.issuer.owner]
            
-- issuer Aprove content on Loc -> Emits Loc for own bank
-- Issuer aprove
template BuyerApproved
  with
    content : Loc
  where
    signatory content.issuerBuyer
    observer content.bankBuyer
    choice BankBuyerApprove : BankBuyerApprovedId
        controller content.bankBuyer
        do  
            create BankBuyerApproved 
                with content
    choice DeclinedBuyer : RevokeId
      with reason: Text
      controller content.bankBuyer
      do 
        sale <- fetch content.sale
        create Revoke 
          with
            reason
            owner = content.bankBuyer
            observers = [sale.owner.bank.party, sale.issuer.bank.party, sale.owner.owner, sale.issuer.owner]
-- Bank Issuer approve
template BankBuyerApproved
  with
    content : Loc
  where
    signatory content.issuerBuyer, content.bankBuyer
    observer content.bankSeller
    choice BankSellerApprove : BankSellerApprovedId
        controller content.bankSeller
        do  
            create BankSellerApproved 
                with content
    choice DeclinedBankBuyer : RevokeId
      with reason: Text
      controller content.bankSeller
      do 
        sale <- fetch content.sale
        create Revoke 
          with
            reason
            owner = content.bankSeller
            observers = [sale.owner.bank.party, sale.issuer.bank.party, sale.owner.owner, sale.issuer.owner]
-- Bank Owner approve
template BankSellerApproved
  with
    content : Loc
  where
    signatory content.issuerBuyer, content.bankBuyer, content.bankSeller
    observer content.ownerSeller
    choice SellerApprove : SellerApprovedId
        with receiptSeller: Text
        controller content.ownerSeller
        do  
            create SellerApproved 
                with content
                     receiptSeller
    choice DeclinedBankSeller : RevokeId
      with reason: Text
      controller content.ownerSeller
      do 
        sale <- fetch content.sale
        create Revoke 
          with
            reason
            owner = content.ownerSeller
            observers = [sale.owner.bank.party, sale.issuer.bank.party, sale.owner.owner, sale.issuer.owner]
-- Owner approve
template SellerApproved
  with
    content : Loc
    receiptSeller: Text
  where
    signatory content.issuerBuyer, content.bankBuyer, content.bankSeller, content.ownerSeller
    observer content.shipSeller
    choice ShipApprove : ShipApprovedId
        with receiptShipper: Text
        controller content.shipSeller
        do  
            create ShipApproved 
                with content
                     receiptSeller
                     receiptShipper
    choice DeclinedSeller : RevokeId
      with reason: Text
      controller content.shipSeller
      do 
        sale <- fetch content.sale
        create Revoke 
          with
            reason
            owner = content.shipSeller
            observers = [sale.owner.bank.party, sale.issuer.bank.party, sale.owner.owner, sale.issuer.owner, content.shipSeller]
-- Ship approve
template ShipApproved
  with
    content : Loc
    receiptSeller: Text
    receiptShipper: Text
  where
    signatory content.issuerBuyer, content.bankBuyer, content.bankSeller, content.ownerSeller, content.shipSeller
    observer content.bankFinalSeller
    choice DocumentationApprove : DocumentationApprovedId
        controller content.bankFinalSeller
        do  
            create DocumentationApproved 
                with content
                     receiptSeller
                     receiptShipper
    choice DeclinedShip : RevokeId
      with reason: Text
      controller content.bankFinalSeller
      do 
        sale <- fetch content.sale
        create Revoke 
          with
            reason
            owner = content.bankFinalSeller
            observers = [sale.owner.bank.party, sale.issuer.bank.party, sale.owner.owner, sale.issuer.owner]
-- Bank Owner approve 2nd
template DocumentationApproved
  with
    content : Loc
    receiptSeller: Text
    receiptShipper: Text
  where
    signatory content.issuerBuyer, content.bankBuyer, content.bankSeller, content.ownerSeller, content.shipSeller, content.bankFinalSeller
    observer content.bankFinalBuyer
    choice FullyApprove : FullyApprovedId
        controller content.bankFinalBuyer
        do  
            archive content.sale
            create FullyApproved
                with content
                     receiptSeller
                     receiptShipper
    choice DeclinedDocumentation : RevokeId
      with reason: Text
      controller content.bankFinalBuyer
      do 
        sale <- fetch content.sale
        create Revoke 
          with
            reason
            owner = content.bankFinalBuyer
            observers = [sale.owner.bank.party, sale.issuer.bank.party, sale.owner.owner, sale.issuer.owner]
-- Bank Issuer approve 2nd -> Consensus for each level
template FullyApproved
  with
    content : Loc
    receiptSeller: Text
    receiptShipper: Text
  where
    signatory content.issuerBuyer, content.bankBuyer, content.bankSeller, content.ownerSeller, content.shipSeller, content.bankFinalSeller, content.bankFinalBuyer
    {- choice EndLoc : ()
      controller content.issuerBuyer
      do
        return ()-}